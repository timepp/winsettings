<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Software Environment Configuration Tool</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"></meta>
    <hta:application id="thisHTA" icon="irftp.exe"></hta:application>
    <style type="text/css">
        .logwin {
            padding-left: 5px;
            font-size: small;
            font-family: monospace;
            border: thin solid skyblue;
            overflow: auto;
        }

        .task_cell {
            cursor: pointer;
        }

        .log_debug {
            color: gray;
        }

        .log_event {
            color: blue;
        }

        .log_warning {
            color: darkorange;
        }

        .log_error {
            color: red;
        }

        #task_table {
            width: 100%;
        }

        #log_header {
            margin-top: 10px;
        }

        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            border: none;
            font-family: Verdana;
        }
    </style>
    <script type="text/javascript" src="tps.js"></script>
    <script type="text/javascript">
        //<!CDATA[
        if (!tps.sys.HasFullPrivilege()) {
            shellapp.ShellExecute("mshta.exe", thisHTA.commandLine, "", "runas", 1);
            window.close();
            document.body.onload = null;
        }

        var G = {
            path_conf: tps.sys.GetScriptDir(),
            path_greensoft: tps.file.FirstExistDir(["d:\\greensoft", "e:\\greensoft", "c:\\greensoft", "d:\\soft", "e:\\soft", "c:\\soft"]) || "d:\\greensoft",
            path_srcroot: tps.file.FirstExistDir(["c:\\src", "d:\\src", "e:\\src"]) || "d:\\src",
            username: shell.Environment("Process")("USERNAME"),
            path_profile: shell.Environment("Process")("USERPROFILE"),
            path_autorun: shell.SpecialFolders("Startup"),
            path_autorun_alluser: shell.SpecialFolders("AllUsersStartup")
        };
        G.path_softconf = G.path_profile + "\\SkyDrive\\softconf";

        var GUI = {
            max_cellwidth: 0,
            cell_columns: 0
        };

        var tasks = [
            {
                name: "autostart: autoit",
                check: function () {
                    return tps.file.Glob(G.path_autorun, /autoit/i, 1).length > 0 ||
                           tps.file.Glob(G.path_autorun_alluser, /autoit/i, 1).length > 0;
                },
                run: function () {
                    var dir = G.path_greensoft + "\\autoit";
                    tps.file.CreateShortcut(G.path_autorun_alluser + "\\autoit.lnk", dir + "\\autoit3.exe", dir, "\"%softconf%\\hotkey.au3\"");
                }
            },
            {
                name: "autostart: handyrun",
                check: function () {
                    return tps.file.Glob(G.path_autorun, /handyrun/i, 1).length > 0 ||
                           tps.file.Glob(G.path_autorun_alluser, /handyrun/i, 1).length > 0;
                },
                run: function () {
                    var dir = G.path_greensoft + "\\handyrun";
                    tps.file.CreateShortcut(G.path_autorun_alluser + "\\handyrun.lnk", dir + "\\handyrun.exe", dir);
                }
            },
            {
                name: "autostart: everything",
                check: function () {
                    var o = tps.sys.RunCommandAndGetResult("schtasks.exe /query /tn everything").output;
                    return o.match(/everything/);
                },
                run: function () {
                    var o = tps.sys.RunCommandAndGetResult('schtasks.exe /create /sc ONLOGON /tn everything /tr "cmd.exe /C start %GS%\\everything\\Everything.exe" /rl HIGHEST /F');
                    alert(o.output ? o.output : o.errors);
                }
            },
            {
                name: "autostart: mactype",
                check: function () {
                    var o = tps.sys.RunCommandAndGetResult("schtasks.exe /query /tn mactype").output;
                    return o.match(/mactype/);
                },
                run: function () {
                    var o = tps.sys.RunCommandAndGetResult('schtasks.exe /create /sc ONLOGON /tn mactype /tr "cmd.exe /C start %GS%\\mactype\\MacTray.exe" /rl HIGHEST /F');
                    alert(o.output ? o.output : o.errors);
                }
            },
            {
                name: "ENV: GS",
                check: function () {
                    return tps.sys.GetSystemEnv("GS") == G.path_greensoft;
                },
                run: function () {
                    tps.sys.SetSystemEnv("GS", G.path_greensoft);
                }
            },
            {
                name: "ENV: SRCROOT",
                check: function () {
                    return tps.sys.GetSystemEnv("SRCROOT") != null;
                },
                run: function () {
                    tps.sys.SetSystemEnv("SRCROOT", G.path_srcroot);
                }
            },
            {
                name: "ENV: SOFTCONF",
                check: function () {
                    return tps.sys.GetSystemEnv("SOFTCONF") != null;
                },
                run: function () {
                    tps.sys.SetSystemEnv("SOFTCONF", G.path_softconf);
                }
            },
            {
                name: "Add G40 to explorer favorites",
                check: function () {
                    return tps.file.Glob(G.path_profile + "\\Links", /G40/i, 1).length > 0;
                },
                run: function () {
                    tps.file.CreateShortcut(G.path_profile + "\\Links\\G40.lnk", "\\\\stcsrv-g40\\Share\\tongjunhui");
                }
            },
            {
                name: "Add %GS%\cmdline to PATH",
                check: function () {
                    return tps.sys.InPath(G.path_greensoft + "\\cmdline");
                },
                run: function () {
                    tps.sys.AddToPath(G.path_greensoft + "\\cmdline");
                }
            },
            {
                name: "Add %GS%\cygwin\bin to PATH",
                check: function () {
                    return tps.sys.InPath(G.path_greensoft + "\\cygwin\\bin");
                },
                run: function () {
                    tps.sys.AddToPath(G.path_greensoft + "\\cygwin\\bin");
                }
            },
            {
                name: "Explore view setting",
                check: function () {
                    var showHiddenFiles = tps.reg.GetIntValue(HKEY_CURRENT_USER, this.keypath(), "Hidden");
                    var hideExt = tps.reg.GetIntValue(HKEY_CURRENT_USER, this.keypath(), "HideFileExt");
                    return (showHiddenFiles == 1 && hideExt == 0);
                },
                run: function () {
                    tps.reg.SetIntValue(HKEY_CURRENT_USER, this.keypath(), "Hidden", 1);
                    tps.reg.SetIntValue(HKEY_CURRENT_USER, this.keypath(), "HideFileExt", 0);
                },
                keypath: function () {
                    return "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced";
                }
            },
            {
                name: "Install 7zip"
            },
            {
                name: "Install git"
            },

            {
            }
        ];

        var ops = [];

        var spanLogDevice = {
            WriteLog: function (level, tag, dt, indent, text) {
                var oLog = document.getElementById("log");
                var oLine = document.createElement("span");
                var timestring = tps.util.FormatDateString(dt, "H:M:S.I");
                var finaltext = timestring + " " + "".lpad(" ", indent * 2) + text;
                oLine.appendChild(document.createTextNode(finaltext));
                oLine.appendChild(document.createElement("br"));
                oLine.className = "log_" + level;
                oLog.appendChild(oLine);
                oLog.scrollTop += 1000000;
            }
        };

        function Init() {
            tps.log.devices.push(spanLogDevice);

            var args = tps.util.ParseArgument(tps.util.SplitCmdLine(thisHTA.commandLine));
            for (var i in tasks) {
                if (tasks[i].name) {
                    ops.push(tasks[i]);
                }
            }

            var tc = document.getElementById("task_c");
            for (var i in ops) {
                var op = ops[i];
                var cell = document.createElement("span");
                cell.innerText = op.name;
                cell.className = "task_cell";
                tc.appendChild(cell);
                if (GUI.max_cellwidth < cell.offsetWidth) GUI.max_cellwidth = cell.offsetWidth;
                tc.removeChild(cell);
                op.status = false;
            }

            window.onresize = OnWindowResize;
            OnWindowResize();

            tps.log.Debug("System Information: ");
            tps.log.Indent();
            for (var x in G) {
                tps.log.Debug(x + ": " + G[x]);
            }
            tps.log.Unindent();

            for (var i in ops) {
                var op = ops[i];
                try {
                    if (op.hasOwnProperty("initialize")) op.initialize();
                    if (op.hasOwnProperty("check")) op.status = op_check(op);
                    MarkStatus(op.cell, op.status);
                }
                catch (e) {
                    var msg = e;
                    if (e.hasOwnProperty("message")) msg = e.message;
                    tps.log.Warning("[$T]: task check failed: $M".replace("$T", op.name).replace("$M", msg));
                }
            }

            AddGradientBK(document.getElementById("log_header"), "skyblue", "#FFFFFF");
        }

        function OnWindowResize() {
            RecalcLayout();
        }

        function RecalcLayout() {
            var oLog = document.getElementById("log");
            var tbl = document.getElementById("task_table");
            var tbl_hdr = document.getElementById("log_header");
            var cols = Math.floor(document.body.offsetWidth / GUI.max_cellwidth);
            if (cols < 1) cols = 1;
            if (cols != GUI.cell_columns) {
                GUI.cell_columns = cols;
                while (tbl.rows.length > 0) {
                    tbl.deleteRow(0);
                }

                var rows = Math.ceil(ops.length / cols);
                for (var i = 0; i < rows; i++) {
                    var row = tbl.insertRow(-1);
                    for (var j = 0; j < cols; j++) {
                        if (j * rows + i >= ops.length) continue;
                        var op = ops[j * rows + i];
                        var cell = row.insertCell(-1);
                        cell.appendChild(document.createTextNode(op.name));
                        cell.className = "task_cell";
                        cell.op = op;
                        cell.style.width = GUI.max_cellwidth;
                        cell.onclick = OnTaskClick;
                        op.cell = cell;
                        MarkStatus(cell, op.status);
                    }
                }
            }

            var h = document.body.offsetHeight - tbl.offsetHeight - tbl_hdr.offsetHeight - 40;
            if (h > 100) {
                oLog.style.height = h;
            }
        }

        function ClearLog() {
            document.getElementById("log").innerHTML = "";
        }
        function AddGradientBK(o, c1, c2, tp) {
            if (c2 == null) c2 = "#FFFFFF";
            if (tp == null) tp = 1;
            o.style.filter = "progid:DXImageTransform.Microsoft.Gradient(GradientType=%tp,StartColorStr='%sc', EndColorStr='%ec')".replace("%sc", c1).replace("%ec", c2).replace("%tp", tp);
        }
        function OnTaskClick() {
            var cell = window.event.srcElement;
            var op = cell.op;
            var has_chk_method = op.hasOwnProperty("check");
            var has_run_method = op.hasOwnProperty("run");
            if (has_chk_method) {
                if (has_run_method) {
                    op_run(op);
                }
                op.status = op_check(op);
            }
            else {
                if (op.status) {
                    if (confirm("Reset this task to undone?")) op.status = false;
                }
                else {
                    if (has_run_method) {
                        op_run(op);
                        op.status = confirm("Task done but cannot check...");
                    }
                    else {
                        op.status = confirm("$T: This task must be done manually...".replace("$T", op.name));
                    }
                }
            }

            MarkStatus(cell, cell.op.status);
        }
        function op_run(op) {
            tps.log.Event("run task: " + op.name);
            tps.log.Indent();
            try { op.run(); } catch (e) {
                var msg = e;
                if (e.hasOwnProperty("message")) msg = e.message;
                tps.log.Warning("[$T]: failed. $M".replace("$T", op.name).replace("$M", msg));
            }
            tps.log.Unindent();
        }
        function op_check(op) {
            tps.log.Event("check " + op.name);
            tps.log.Indent();
            var ret = false;
            try {
                ret = op.check();
            } catch (e) {
                var msg = e;
                if (e.hasOwnProperty("message")) msg = e.message;
                tps.log.Error("task check failed: $M".replace("$T", op.name).replace("$M", msg));
            }
            tps.log.Unindent();
            return ret;
        }
        function MarkStatus(o, c) { AddGradientBK(o, c ? "#CCFFCC" : "#FFCCCC"); }
        //]]>
    </script>
</head>
<body onload="Init()" onkeydown="if (event.keyCode == 27) window.close()">
    <table id="frame_tbl" style="width: 100%;">
        <tr>
            <td id="task_c">
                <table id="task_table">
                </table>
            </td>
        </tr>
        <tr>
            <td style="height: 20px;"></td>
        </tr>
        <tr>
            <td id="log_header">OPERATION LOG
            </td>
        </tr>
        <tr>
            <td>
                <div id="log" class="logwin">
                </div>
            </td>
        </tr>
    </table>
</body>
</html>
